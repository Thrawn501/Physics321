TITLE: PHY321: Conservative Forces
AUTHOR: "Morten Hjorth-Jensen":"http://mhjgit.github.io/info/doc/web/" {copyright, 1999-present|CC BY-NC} at Department of Physics and Astronomy and Facility for Rare Ion Beams (FRIB), Michigan State University, USA & Department of Physics, University of Oslo, Norway
DATE: today


!split
=====   Aims and Overarching Motivation =====

=== Monday ===

Short repetition from last week. Discussion of momentum and angular momentum.
Reading suggestion: Taylor sections 3.1-3.4

=== Wednesday ===

More on angular momentum, Taylor sections 3.4 and 3.5. Discussion of potential energy and conservative forces.
Reading suggestions: Taylor section 4.2

===  Friday ===

Conservative forces and potential energy. Reading suggestion: Taylor sections 4.2-4.4

If you wish to read more about conservative forces or not, Feyman's lectures from 1963 are quite interesting.
He states for example that _All fundamental forces in nature appear to be conservative_.
This statement was made while developing his argument that *there are no nonconservative forces*.
You may enjoy the link to "Feynman's lecture":"http://www.feynmanlectures.caltech.edu/I_14.html".




!split
===== Translational Invariance and Conservation of Momentum =====

Thus, if the potential is unchanged by a translation of the coordinate
system, the total momentum is conserved. If the potential is
translationally invariant in a given direction, defined by a unit
vector, $\hat{\epsilon}$ in the $\bm{\epsilon}$ direction, one can see
that

!bt
\begin{eqnarray}
\hat{\epsilon}\cdot\nabla_i V(\bm{r}_i)&=&0.
\end{eqnarray}
!et

The component of the total momentum along that axis is conserved. This
is rather obvious for a single particle. If $V(\bm{r})$ does not
depend on some coordinate $x$, then the force in the $x$ direction is
$F_x=-\partial_xV=0$, and momentum along the $x$ direction is
constant.

We showed how the total momentum of an isolated system of particle was conserved, even if the particles feel internal forces in all directions. In that case the potential energy could be written 

!bt
\begin{eqnarray}
V=\sum_{i,j\le i}V_{ij}(\bm{r}_i-\bm{r}_j).
\end{eqnarray}
!et

In this case, a translation leads to $\bm{r}_i\rightarrow
\bm{r}_i+\bm{\epsilon}$, with the translation equally affecting the
coordinates of each particle. Because the potential depends only on
the relative coordinates, $\delta V$ is manifestly zero. If one were
to go through the exercise of calculating $\delta V$ for small
$\bm{\epsilon}$, one would find that the term
$\nabla_i V(\bm{r}_i-\bm{r}_j)$ would be canceled by the term
$\nabla_jV(\bm{r}_i-\bm{r}_j)$.

The relation between symmetries of the potential and conserved
quantities (also called constants of motion) is one of the most
profound concepts one should gain from this course. It plays a
critical role in all fields of physics. This is especially true in
quantum mechanics, where a quantity $A$ is conserved if its operator
commutes with the Hamiltonian. For example if the momentum operator
$-i\hbar\partial_x$ commutes with the Hamiltonian, momentum is
conserved, and clearly this operator commutes if the Hamiltonian
(which represents the total energy, not just the potential) does not
depend on $x$. Also in quantum mechanics the angular momentum operator
is $L_z=-i\hbar\partial_\phi$. In fact, if the potential is unchanged
by rotations about some axis, angular momentum about that axis is
conserved. We return to this concept, from a more formal perspective,
later in the course when Lagrangian mechanics is presented.


===== Bulding a code for the Earth-Sun system =====

We will now venture into a study of a system which is energy
conserving. The aim is to see if we (since it is not possible to solve
the general equations analytically) we can develop stable numerical
algorithms whose results we can trust!

We solve the equations of motion numerically. We will also compute
quantities like the energy numerically.

We start with a simpler case first, the Earth-Sun system  in two dimensions only.  The gravitational force $F_G$ on the earth from the sun is  
!bt
\[
\bm{F}_G=-\frac{GM_{\odot}M_E}{r^3}\bm{r},
\]
!et
where $G$ is the gravitational constant, 
!bt
\[
M_E=6\times 10^{24}\mathrm{Kg},
\]
!et 
the mass of Earth, 
!bt
\[
M_{\odot}=2\times 10^{30}\mathrm{Kg}, 
\]
!et
the mass of the Sun and 
!bt
\[
r=1.5\times 10^{11}\mathrm{m}, 
\]
!et
is the distance between Earth and the Sun. The latter defines what we call an astronomical unit _AU_.
From Newton's second law we have then for the $x$ direction
!bt
\[
\frac{d^2x}{dt^2}=-\frac{F_{x}}{M_E},
\]
!et
and
!bt
\[
\frac{d^2y}{dt^2}=-\frac{F_{y}}{M_E},
\]
!et 
for the $y$ direction.

Here we will use  that  $x=r\cos{(\theta)}$, $y=r\sin{(\theta)}$ and
!bt
\[
r = \sqrt{x^2+y^2}.
\]
!et 
We can rewrite 
!bt
\[
F_{x}=-\frac{GM_{\odot}M_E}{r^2}\cos{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}x,
\]
!et
and
!bt
\[
F_{y}=-\frac{GM_{\odot}M_E}{r^2}\sin{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}y,
\]
!et 
for the $y$ direction.


We can rewrite these two equations
!bt
\[
F_{x}=-\frac{GM_{\odot}M_E}{r^2}\cos{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}x,
\]
!et
and
!bt
\[
F_{y}=-\frac{GM_{\odot}M_E}{r^2}\sin{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}y,
\]
!et 
as four first-order coupled differential equations
!bt
\[
\frac{dv_x}{dt}=-\frac{GM_{\odot}}{r^3}x,
\]
!et
!bt
\[
\frac{dx}{dt}=v_x,
\]
!et
!bt
\[
\frac{dv_y}{dt}=-\frac{GM_{\odot}}{r^3}y,
\]
!et
!bt
\[
\frac{dy}{dt}=v_y.
\]
!et



!split
===== Building a code for the solar system, final coupled equations =====

The four coupled differential equations
!bt
\[
\frac{dv_x}{dt}=-\frac{GM_{\odot}}{r^3}x,
\]
!et
!bt
\[
\frac{dx}{dt}=v_x,
\]
!et
!bt
\[
\frac{dv_y}{dt}=-\frac{GM_{\odot}}{r^3}y,
\]
!et
!bt
\[
\frac{dy}{dt}=v_y,
\]
!et
can be turned into dimensionless equations or we can introduce astronomical units with $1$ AU = $1.5\times 10^{11}$. 

Using the equations from circular motion (with $r =1\mathrm{AU}$) 
!bt
\[
\frac{M_E v^2}{r} = F = \frac{GM_{\odot}M_E}{r^2},
\]
!et 
we have
!bt
\[
GM_{\odot}=v^2r,
\]
!et  
and using that the velocity of Earth (assuming circular motion) is
$v = 2\pi r/\mathrm{yr}=2\pi\mathrm{AU}/\mathrm{yr}$, we have
!bt
\[
GM_{\odot}= v^2r = 4\pi^2 \frac{(\mathrm{AU})^3}{\mathrm{yr}^2}.
\]
!et 



!split
===== Building a code for the solar system, discretized equations =====

The four coupled differential equations can then be discretized using Euler's method as (with step length $h$)
!bt
\[
v_{x,i+1}=v_{x,i}-h\frac{4\pi^2}{r_i^3}x_i,
\]
!et
!bt
\[
x_{i+1}=x_i+hv_{x,i},
\]
!et
!bt
\[
v_{y,i+1}=v_{y,i}-h\frac{4\pi^2}{r_i^3}y_i,
\]
!et
!bt
\[
y_{i+1}=y_i+hv_{y,i},
\]
!et


!split
===== Code Example with Euler's Method =====

The code here implements Euler's method for the Earth-Sun system using a more compact way of representing the vectors. Alternatively, you could have spelled out all the variables $v_x$, $v_y$, $x$ and $y$ as one-dimensional arrays. 

!bc pycod
# Common imports
import numpy as np
import pandas as pd
from math import *
import matplotlib.pyplot as plt
import os

# Where to save the figures and data files
PROJECT_ROOT_DIR = "Results"
FIGURE_ID = "Results/FigureFiles"
DATA_ID = "DataFiles/"

if not os.path.exists(PROJECT_ROOT_DIR):
    os.mkdir(PROJECT_ROOT_DIR)

if not os.path.exists(FIGURE_ID):
    os.makedirs(FIGURE_ID)

if not os.path.exists(DATA_ID):
    os.makedirs(DATA_ID)

def image_path(fig_id):
    return os.path.join(FIGURE_ID, fig_id)

def data_path(dat_id):
    return os.path.join(DATA_ID, dat_id)

def save_fig(fig_id):
    plt.savefig(image_path(fig_id) + ".png", format='png')


DeltaT = 0.001
#set up arrays 
tfinal = 10 # in years
n = ceil(tfinal/DeltaT)
# set up arrays for t, a, v, and x
t = np.zeros(n)
v = np.zeros((n,2))
r = np.zeros((n,2))
# Initial conditions as compact 2-dimensional arrays
r0 = np.array([1.0,0.0])
v0 = np.array([0.0,2*pi])
r[0] = r0
v[0] = v0
Fourpi2 = 4*pi*pi
# Start integrating using Euler's method
for i in range(n-1):
    # Set up the acceleration
    # Here you could have defined your own function for this
    rabs = sqrt(sum(r[i]*r[i]))
    a =  -Fourpi2*r[i]/(rabs**3)
    # update velocity, time and position using Euler's forward method
    v[i+1] = v[i] + DeltaT*a
    r[i+1] = r[i] + DeltaT*v[i]
    t[i+1] = t[i] + DeltaT
# Plot position as function of time    
fig, ax = plt.subplots()
#ax.set_xlim(0, tfinal)
ax.set_ylabel('x[m]')
ax.set_xlabel('y[m]')
ax.plot(r[:,0], r[:,1])
fig.tight_layout()
save_fig("EarthSunEuler")
plt.show()
!ec


!split
===== Problems with Euler's Method =====

We notice here that Euler's method doesn't give a stable orbit. It
means that we cannot trust Euler's method. In a deeper way, as we will
see in homework 5, Euler's method does not conserve energy. It is an
example of an integrator which is not
"symplectic":"https://en.wikipedia.org/wiki/Symplectic_integrator".

Here we present thus two methods, which with simple changes allow us to avoid these pitfalls. The simplest possible extension is the so-called Euler-Cromer method.
The changes we need to make to our code are indeed marginal here.
We need simply to replace
!bc pycod
    r[i+1] = r[i] + DeltaT*v[i]
!ec
in the above code with the velocity at the new time $t_{i+1}$
!bc pycod
    r[i+1] = r[i] + DeltaT*v[i+1]
!ec

By this simple caveat we get stable orbits.
Below we derive the Euler-Cromer method as well as one of the most utlized algorithms for sovling the above type of problems, the so-called Velocity-Verlet method. 

!split
===== Deriving the Euler-Cromer Method =====

Let us repeat Euler's method.
We have a differential equation
!bt
\begin{equation}
y'(t_i)=f(t_i,y_i)   
\end{equation}
!et
and if we truncate at the first derivative, we have from the Taylor expansion
!bt
\begin{equation}
y_{i+1}=y(t_i) + (\Delta t) f(t_i,y_i) + O(\Delta t^2), label{eq:euler}
\end{equation}
!et
which when complemented with $t_{i+1}=t_i+\Delta t$ forms
the algorithm for the well-known Euler method. 
Note that at every step we make an approximation error
of the order of $O(\Delta t^2)$, however the total error is the sum over all
steps $N=(b-a)/(\Delta t)$ for $t\in [a,b]$, yielding thus a global error which goes like
$NO(\Delta t^2)\approx O(\Delta t)$. 

To make Euler's method more precise we can obviously
decrease $\Delta t$ (increase $N$), but this can lead to loss of numerical precision.
Euler's method is not recommended for precision calculation,
although it is handy to use in order to get a first
view on how a solution may look like.

Euler's method is asymmetric in time, since it uses information about the derivative at the beginning
of the time interval. This means that we evaluate the position at $y_1$ using the velocity
at $v_0$. A simple variation is to determine $x_{n+1}$ using the velocity at
$v_{n+1}$, that is (in a slightly more generalized form)
!bt
\begin{equation} 
y_{n+1}=y_{n}+ v_{n+1}+O(\Delta t^2)
\end{equation}
!et
and 
!bt
\begin{equation}
v_{n+1}=v_{n}+(\Delta t) a_{n}+O(\Delta t^2).
\end{equation}
!et
The acceleration $a_n$ is a function of $a_n(y_n, v_n, t_n)$ and needs to be evaluated
as well. This is the Euler-Cromer method.

_Exercise_: go back to the above code with Euler's method and add the Euler-Cromer method. 


!split
===== Deriving the Velocity-Verlet Method =====

Let us stay with $x$ (position) and $v$ (velocity) as the quantities we are interested in.

We have the Taylor expansion for the position given by
!bt
\[
x_{i+1} = x_i+(\Delta t)v_i+\frac{(\Delta t)^2}{2}a_i+O((\Delta t)^3).
\]
!et
The corresponding expansion for the velocity is 
!bt
\[
v_{i+1} = v_i+(\Delta t)a_i+\frac{(\Delta t)^2}{2}v^{(2)}_i+O((\Delta t)^3).
\]
!et
Via Newton's second law we have normally an analytical expression for the derivative of the velocity, namely
!bt
\[
a_i= \frac{d^2 x}{dt^2}\vert_{i}=\frac{d v}{dt}\vert_{i}= \frac{F(x_i,v_i,t_i)}{m}.
\]
!et


If we add to this the corresponding expansion for the derivative of the velocity 
!bt
\[
v^{(1)}_{i+1} = a_{i+1}= a_i+(\Delta t)v^{(2)}_i+O((\Delta t)^2)=a_i+(\Delta t)v^{(2)}_i+O((\Delta t)^2), 
\]
!et
and retain only terms up to the second derivative of the velocity since our error goes as $O(h^3)$, we have
!bt
\[
(\Delta t)v^{(2)}_i\approx a_{i+1}-a_i.
\]
!et
We can then rewrite the Taylor expansion for the velocity as  
!bt
\[
v_{i+1} = v_i+\frac{(\Delta t)}{2}\left( a_{i+1}+a_{i}\right)+O((\Delta t)^3).
\]
!et




!split
===== The velocity Verlet method =====

Our final equations for the position and the velocity become then 
!bt
\[
x_{i+1} = x_i+(\Delta t)v_i+\frac{(\Delta t)^2}{2}a_{i}+O((\Delta t)^3),
\]
!et
and
!bt
\[
v_{i+1} = v_i+\frac{(\Delta t)}{2}\left(a_{i+1}+a_{i}\right)+O((\Delta t)^3). 
\]
!et
Note well that the term $a_{i+1}$ depends on the position at $x_{i+1}$. This means that you need to calculate 
the position at the updated time $t_{i+1}$ before the computing the next velocity.  Note also that the derivative of the velocity at the time
$t_i$ used in the updating of the position can be reused in the calculation of the velocity update as well. 


!split
===== Adding the Velocity-Verlet Method =====

We can now easily add the Verlet method to our original code as
!bc pycod
DeltaT = 0.01
#set up arrays 
tfinal = 10
n = ceil(tfinal/DeltaT)
# set up arrays for t, a, v, and x
t = np.zeros(n)
v = np.zeros((n,2))
r = np.zeros((n,2))
# Initial conditions as compact 2-dimensional arrays
r0 = np.array([1.0,0.0])
v0 = np.array([0.0,2*pi])
r[0] = r0
v[0] = v0
Fourpi2 = 4*pi*pi
# Start integrating using the Velocity-Verlet  method
for i in range(n-1):
    # Set up forces, air resistance FD, note now that we need the norm of the vecto
    # Here you could have defined your own function for this
    rabs = sqrt(sum(r[i]*r[i]))
    a =  -Fourpi2*r[i]/(rabs**3)
    # update velocity, time and position using the Velocity-Verlet method
    r[i+1] = r[i] + DeltaT*v[i]+0.5*(DeltaT**2)*a
    rabs = sqrt(sum(r[i+1]*r[i+1]))
    anew = -4*(pi**2)*r[i+1]/(rabs**3)
    v[i+1] = v[i] + 0.5*DeltaT*(a+anew)
    t[i+1] = t[i] + DeltaT
# Plot position as function of time    
fig, ax = plt.subplots()
ax.set_ylabel('x[m]')
ax.set_xlabel('y[m]')
ax.plot(r[:,0], r[:,1])
fig.tight_layout()
save_fig("EarthSunVV")
plt.show()
!ec

You can easily generalize the calculation of the forces by defining a function
which takes in as input the various variables. We leave this as a challenge to you.







